// 설계에 대해여...
/*
  - 설계할 때 무얼 정리하는가?
  - 개구리 가 얘기했던 기능구현 후 refactoring으로 보완
  - 설계 = 창의성이다.

  - 중요한건 툴이 아닌 크리에이티브에 대한 것
  - 변화를 중점으로 생각해야 한다.(변화 = 요구사항)
  - 앞으로도 요구사항은 변화 되어 갈 것이라고 생각해야 한다.
  - 이 변화를 어떻게 새련되게 만들 것(대응)인가? 
    > 문제점 
      : 예측이 되기가 어렵다 => 대응이 안된다...
      : 고로 예측이 되는 부분을 최대한 해야한다.
  - 기능이 에만 초첨이 되어 있는전 지양해야 한다(확장성이 없기 때문에)
  - 변화에 대한 디자인을 생각해 낼 수 있는가???(주니어 차이점을 둘 수 있는 것들)
  - 변화가 많은 기능이 있다 (느슨한 결합을 해야 한다.)
    > class 단위 , fun단위를 왜 짜는가? 왜 필요한다 => 기능완성에만 초점을 두는 것이 아닌 변화에 대응할 수 있기 때문에
  - 어떻게 설계 해야 하는가?
    > 1) 시나리오('use case')를 짠다.
      => `유저[사람이 아닐 수도 있음]` <===> `S/W`
      => 유저에 대한 입장은 기획서에 대한 생각일 수 있음
    > 2) 구조를 잡아라 
      => 데이터(=모델[데이터 관점에서 데이터의 변경을 나타내는 단위])의 정의가 되어야 함.(todo에서는 할일들, 완료일 => id, contents, date)
      => stats와 데이터의 변경을 나타내는 점은 같으나 구체적으로 차이가 있음(찾아보기 모델과 stats의 차이)
      => 각각의 역할에 대해 정리가 명확해야 한다(어떤 기능인지?)
    > 3) 위에 과정(1, 2)을 설계된 것에서 관계성에 대해 머릿속에 그려져야 한다.
      => 기본적인 역할이 분리 되었다면 그것을 어떻게 구조적인 관계와 단위를 만들어 갈 것인가?(class? function?)
    > 4) 큰문제도 STEP 단위로 나누고 문제를 잘게 나눠야 한다.
      => 데이터 구조와 설계를 일반 세계에 추상화 시켜야 한다.
    > 5) 정리
      => 시나리오 정의 
      => 데이터의 정의 
      => `use case ` === `test case`
      => TDD -> `use case`의 기반 으로 -> `test case`를 만든다.
      => TDD는 `use case`를 만들게 하는 설계 방법이다.
      => 데이터를 어떻게 나누고 클라이언트에서 임시 저장된 데이터를 활용 할 것인가?(프론트의 구조) 
      => 의존성 관리(객체 지향의 목표 중 하나)
      
*/